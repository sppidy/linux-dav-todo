name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-4.0 libgtk-4-dev gobject-introspection libgirepository1.0-dev
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      
      - name: Run tests
        run: |
          pytest tests/
  
  build:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.11 python3.11-dev python3.11-venv python3-gi python3-gi-cairo gir1.2-gtk-4.0 libgtk-4-dev gobject-introspection libgirepository1.0-dev python3-setuptools python3-pip patchelf ccache
      
      - name: Set up virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka ordered-set
      
      - name: Create distribution directory
        run: |
          mkdir -p dist
          cp -r assets/* dist/assets/
        
      - name: Get GI paths
        id: gi-paths
        run: |
          echo "TYPELIB_DIR=/usr/lib/x86_64-linux-gnu/girepository-1.0" >> $GITHUB_ENV
          echo "GI_PATH=$(python3 -c 'import gi; import os; print(os.path.dirname(gi.__file__))')" >> $GITHUB_ENV

      - name: Verify GI paths
        run: |
          if [ ! -d "${{ env.TYPELIB_DIR }}" ]; then
            echo "Error: Typelib directory not found: ${{ env.TYPELIB_DIR }}"
            exit 1
          fi
          if [ ! -d "${{ env.GI_PATH }}" ]; then
            echo "Error: GI package directory not found: ${{ env.GI_PATH }}"
            exit 1
          fi
      
      - name: Build binary with Nuitka
        run: |
          source .venv/bin/activate
          python -m nuitka \
            --standalone \
            --onefile \
            --enable-plugin=gi \
            --include-package=gi \
            --include-package-data=gi \
            --include-module=cairo \
            --include-package-data=cairo \
            --include-data-dir="${{ github.workspace }}/assets=assets" \
            --linux-icon="${{ github.workspace }}/assets/logo.png" \
            --follow-imports \
            --prefer-source-code \
            --show-modules \
            --show-progress \
            --plugin-enable=pylint-warnings \
            --follow-stdlib \
            --remove-output \
            --jobs="$(nproc)" \
            --warn-implicit-exceptions \
            --warn-unusual-code \
            --include-data-files="${{ github.workspace }}/assets/logo.png=assets/logo.png" \
            --include-package=gi.repository \
            --include-data-dir="${{ env.TYPELIB_DIR }}"=typelib \
            --include-data-dir="${{ env.GI_PATH }}"=gi \
            src/main.py \
            --output-dir=dist
      
      - name: Create release package
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_NAME="linux-dav-todo-${VERSION}"
          
          # Create package directory structure
          mkdir -p "${PACKAGE_NAME}/usr/local/bin"
          mkdir -p "${PACKAGE_NAME}/usr/local/share/applications"
          mkdir -p "${PACKAGE_NAME}/usr/local/share/icons/linux-dav-todo"
          
          # Copy files
          cp dist/main.bin "${PACKAGE_NAME}/usr/local/bin/linux-dav-todo"
          cp linux-dav-todo.desktop "${PACKAGE_NAME}/usr/local/share/applications/"
          cp assets/logo.png "${PACKAGE_NAME}/usr/local/share/icons/linux-dav-todo/"
          
          # Make binary executable
          chmod +x "${PACKAGE_NAME}/usr/local/bin/linux-dav-todo"
          
          # Create tarball
          tar -czf "dist/${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}"
      
      - name: Install Debian packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper dpkg-dev

      - name: Create Debian package
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Create debian package structure
          mkdir -p debian/DEBIAN
          mkdir -p debian/usr/local/bin
          mkdir -p debian/usr/local/share/applications
          mkdir -p debian/usr/local/share/icons/linux-dav-todo
          
          # Copy files
          cp dist/main.bin "debian/usr/local/bin/linux-dav-todo"
          cp linux-dav-todo.desktop "debian/usr/local/share/applications/"
          cp assets/logo.png "debian/usr/local/share/icons/linux-dav-todo/"
          
          # Make binary executable
          chmod +x "debian/usr/local/bin/linux-dav-todo"
          
          # Create control file
          cat > debian/DEBIAN/control << EOF
          Package: linux-dav-todo
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Spidy <sppidytg@gmail.com>
          Description: Linux DAV Todo Application
           A GTK4-based Todo application with WebDAV synchronization support.
          EOF
          
          # Build debian package
          dpkg-deb --build debian "dist/linux-dav-todo_${VERSION}_amd64.deb"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/linux-dav-todo-*.tar.gz
            dist/linux-dav-todo_*_amd64.deb
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}